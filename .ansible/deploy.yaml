- hosts: swarm_manager
  strategy: linear
  roles:
    - application

  tasks:

    - include_role:
        name: docker
        tasks_from: stack_teardown
      when: clean_install | default(false)

    - name: 'Wipe all persistent data'
      file:
        state: absent
        path: '{{ app_dir }}'
      become: yes
      when: clean_install | default(false)

    - include_role:
        name: application
        tasks_from: make_config_dir

    - include_role:
        name: application
        tasks_from: make_data_dir

    - name: Ensure {{ config_dir }}/certs exists
      file:
        state: directory
        path: '{{ config_dir }}/certs'

    - name: Ensure {{ config_dir }}/slapd exists
      file:
        state: directory
        path: '{{ config_dir }}/slapd'

    - name: 'Loosen config dir permissions'
      file:
        state: directory
        path: '{{ config_dir }}'
        mode: 'u=rwx,g=rwx,o=rwx'

    - name: 'Loosen data dir permissions'
      file:
        state: directory
        path: '{{ data_dir }}'
        mode: 'u=rwx,g=rwx,o=rwx'

    - name: 'Copy dhparam.pem to {{ config_dir }}/certs/custom_dhparam.pem'
      copy:
        content: '{{ tls.dhparam }}'
        dest: '{{ config_dir }}/certs/custom_dhparam.pem'
      become: yes

    - name: 'Copy ca.crt to {{ config_dir }}/certs/custom_ca.crt'
      copy:
        content: '{{ tls.chain }}'
        dest: '{{ config_dir }}/certs/custom_ca.crt'
      become: yes

    - name: 'Copy ldap.crt to {{ config_dir }}/certs/custom_ldap.crt'
      copy:
        content: '{{ tls.cert }}'
        dest: '{{ config_dir }}/certs/custom_ldap.crt'
      become: yes

    - name: 'Copy ldap.key to {{ config_dir }}/certs/custom_ldap.key'
      copy:
        content: '{{ tls.key }}'
        dest: '{{ config_dir }}/certs/custom_ldap.key'
      become: yes

    - name: 'Copy hostname to {{ config_dir }}/hostname'
      copy:
        content: '{{ domain }}'
        dest: '{{ config_dir }}/hostname'
      become: yes

    - name: 'Render hosts to {{ config_dir }}/hosts'
      template:
        src: hosts
        dest: '{{ config_dir }}/hosts'
      become: yes

    - name: Allow port 389 (LDAP)
      ufw:
        rule: allow
        port: '389'
        proto: any
      become: yes

    - name: Allow port 636 (LDAPS)
      ufw:
        rule: allow
        port: '636'
        proto: any
      become: yes

    - name: Reload Firewall and enable at boot
      ufw:
        state: enabled
        policy: deny
      become: yes

    - include_role:
        name: docker
        tasks_from: stack_deploy

    - include_role:
        name: docker
        tasks_from: service_update
      vars:
        options: --force
        docker_service: main


